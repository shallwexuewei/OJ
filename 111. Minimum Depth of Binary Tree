/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int minDepth(TreeNode root) {
        if(root == null)    return 0;
        
        LinkedList<TreeNode> q = new LinkedList<TreeNode>();
        q.add(root);
        int depth = 1;
        boolean found = false;
        
        while(!q.isEmpty()){
            // bfs / level order travesal to find the first leaf node
            
            // get the size of last level
            int num = q.size();
            for(int i = 0; i < num; i++) {
                TreeNode node = q.removeFirst();
                if(node.left == null && node.right == null) {
                    found = true;
                    break;
                }
                if(node.left != null)  {
                    q.add(node.left);
                }
                if(node.right != null) {
                    q.add(node.right);
                }
            }
            
            if(found)   break;
            
            depth++;
        }
        return depth;
    }
}

/*
Submission Result: Wrong Answer More Details 

Input:
[1,2,3,4,5]
Output:
3
Expected:
2
*/

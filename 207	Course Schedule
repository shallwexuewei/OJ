public class Solution {
    public static class Course{
        public int i;
        public int prerequisitesNum;
        public LinkedList<Course> children;
        
        public Course(int i){
            this.i = i;
            prerequisitesNum = 0;
            children = new LinkedList<Course>();
        }
        
        public void addPrerequisite(Course prerequisite) {
            prerequisitesNum++;
            prerequisite.addChild(this);
        }
        
        public void addChild(Course child) {
            children.add(child);
        }
        
        public void deletePrerequisite() {
            prerequisitesNum--;
        }
        
        public void finishCourse() {
            for(Course child:children) {
                child.deletePrerequisite();
            }
        }
        
        public int prerequisitesNum(){
            return prerequisitesNum;
        }
    }
    
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<Course> courses = new ArrayList<Course>();
        for(int i = 0; i < numCourses; i++) {
            courses.add(new Course(i));
        }
        for(int i = 0; i < prerequisites.length; i++) {
            courses.get(prerequisites[i][0]).addPrerequisite(courses.get(prerequisites[i][1]));
        }
        
        LinkedList<Course> q = new LinkedList<Course>();
        for(int i = 0; i < numCourses; i++) {
            Course current = courses.get(i);
            if(current.prerequisitesNum() == 0) {
                q.add(current);
            }
        }
        
        while(!q.isEmpty()) {
            Course current = q.remove();
            current.finishCourse();
            
            for(Course child:current.children) {
                if(child.prerequisitesNum() == 0) {
                    q.add(child);
                }
            }
        }
        
        boolean result = true;
        for(Course course:courses) {
            if(course.prerequisitesNum() > 0) {
                //System.out.println(course.i + ", " + course.prerequisitesNum());
                result = false;
                break;
            }
        }
        return result;
    }
}

public class Solution {
    public int calculateMinimumHP(int[][] dungeon) {
        if(dungeon == null) return 1;
        
        int rows = dungeon.length;
        if(rows == 0)       return 1;
        
        int cols = dungeon[0].length;
        if(cols == 0)       return 1;
        
        int[] hp = new int[cols];
        // fill last row
        int r = rows - 1;
        int c = cols - 1;
        hp[c] = Math.max(1-dungeon[r][c], 1);
        for(c--; c > -1; c--) {
            hp[c] = Math.max(hp[c+1]-dungeon[r][c], 1);
        }
        for(r--; r > -1; r--) {
            c = cols - 1;
            hp[c] = Math.max(hp[c]-dungeon[r][c], 1);
            for(c--; c > -1; c--) { 
                int down = Math.max(hp[c]-dungeon[r][c], 1);
                int right = Math.max(hp[c+1]-dungeon[r][c], 1);
                hp[c] = Math.min(down, right);
            }
        }
        return hp[0];
        
    }
}


/*
Submission Result: Runtime Error More Details 

Runtime Error Message:
Line 16: java.lang.ArrayIndexOutOfBoundsException: 1
Last executed input:
[[2],[1]]

Submission Result: Wrong Answer More Details 

Input:
[[-200]]
Output:
200
Expected:
201

Submission Result: Wrong Answer More Details 

Input:
[[-3],[-7]]
Output:
8
Expected:
11

Submission Result: Wrong Answer More Details 

Input:
[[0,5],[-2,-3]]
Output:
6
Expected:
1

Submission Result: Wrong Answer More Details 

Input:
[[0,-5],[0,0]]
Output:
6
Expected:
1

Submission Result: Wrong Answer More Details 

Input:
[[1,-3,3],[0,-2,0],[-3,-3,-3]]
Output:
5
Expected:
3
*/

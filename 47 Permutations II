import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class Solution {
	public List<List<Integer>> permuteUnique(int[] nums) {
        
        // 1
        // 1 1
        // insert 2 to index 0, 1, 2
        // 2 1 1, 1 2 1, 1 1 2
        
        // 1 1 2 3 3
        // 2 1 1, 1 2 1, 1 1 2
        // insert 3, 3:
        // 3 3 2 1 1, 3 2 3 1 1, 3 2 1 3 1, 3 2 1 1 3, 
        // 2 3 3 1 1, 2 3 1 3 1, 2 3 1 1 3
        // 2 1 3 3 1, 2 1 3 1 3
        // 2 1 1 3 3
        // 3 3 1 2 1, 3 1 3 2 1, 3 1 2 3 1, 3 1 2 1 3,
        // 1 3 3 2 1, 1 3 2 3 1, 1 3 2 1 3
        // 1 2 3 3 1, 1 2 3 1 3
        // 1 2 1 3 3
        // 3 3 1 1 2, 3 1 3 1 2, 3 1 1 3 2, 3 1 1 2 3
        // 1 3 3 1 2, ...
        
        HashMap<Integer, Integer> num2cnt = new HashMap<Integer, Integer>();
        for(int num:nums){
            if(num2cnt.containsKey(num) ){
                num2cnt.put(num, num2cnt.get(num) + 1);
            } else {
                num2cnt.put(num, 1);
            }
        }
        
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        
        permute(num2cnt, new ArrayList<Integer>(), nums.length, result);
        return result;
    }

	private void permute(HashMap<Integer, Integer> num2cnt,
			ArrayList<Integer> prefix, int remaining, List<List<Integer>> result) {
		/* Base case. */
		if (remaining == 0) {
			result.add(prefix);
			return;
		}

		/*
		 * try remining numbers for next number, and generate remaining
		 * permutations
		 */
		for (int num : num2cnt.keySet()) {
			int cnt = num2cnt.get(num);
			ArrayList<Integer> newPrefix = new ArrayList<Integer>(prefix);
			newPrefix.add(num);
			if (cnt > 0) {
				num2cnt.put(num, cnt - 1);
				permute(num2cnt, newPrefix, remaining - 1, result);
				num2cnt.put(num, cnt);
			} 
		}
	}
}

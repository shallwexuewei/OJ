public class WordDistance {
    HashMap<String, LinkedList<Integer>> word2pos;

    /* O(N^2) to make a map
    * whose keys are two String, the former one is smaller in dictionary order
    */
    public WordDistance(String[] words) {
        int len = words.length;
        word2pos = new HashMap<String, LinkedList<Integer>>();
        
        for(int i = 0; i < len; i++) {
            if(word2pos.containsKey(words[i])){
                word2pos.get(words[i]).add(i);
            } else {
                LinkedList<Integer> posList = new LinkedList<Integer>();
                posList.add(i);
                word2pos.put(words[i], posList);
            }
        }
    }
    
    public int shortest(String word1, String word2) {
        LinkedList<Integer> posList1 = word2pos.get(word1);
        LinkedList<Integer> posList2 = word2pos.get(word2);
        int i = 0; 
        int j = 0;
        int n1 = posList1.size();
        int n2 = posList2.size();
        int minLen = Integer.MAX_VALUE;
        while(i < n1 && j < n2) {
            minLen = Math.min(minLen, Math.abs(posList1.get(i) - posList2.get(j)));
            if(posList1.get(i) < posList2.get(j)){
                i++;
            } else {
                j++;
            }
        }
        return minLen;
        
    }
}

// Your WordDistance object will be instantiated and called as such:
// WordDistance wordDistance = new WordDistance(words);
// wordDistance.shortest("word1", "word2");
// wordDistance.shortest("anotherWord1", "anotherWord2");
